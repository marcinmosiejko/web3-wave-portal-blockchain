// TO RUN THE SCRIPT
// npx hardhat run scripts/run.js

const main = async () => {
  const [owner, randomPerson] = await hre.ethers.getSigners(); // returns wallet addresses generated by Hardhat, starting with contract's owner address

  ///////////////////////////////////////////
  // CONTRACT DEPLOYMENT
  const waveContractFactory = await hre.ethers.getContractFactory("WavePortal"); // compiles the contract
  const waveContract = await waveContractFactory.deploy(); // creates a local Ethereum network (gets destroyed at the end of the script) and deploys the contract
  await waveContract.deployed();
  console.log("Contract deployed to:", waveContract.address); // waveContract.address give the address of the deployed contract
  console.log("Contract deployed by:", owner.address);

  ///////////////////////////////////////////
  // INTERACTING WITH THE CONTRACT
  let waveCount;
  // Manually calling contract functions, it's like using API
  waveCount = await waveContract.getTotalWaves();
  console.log("Wave count BEFORE interacting:", waveCount.toNumber());

  // Send a few waves
  let waveTxn = await waveContract.wave("A message!");
  await waveTxn.wait(); // Wait for the transaction to be mined

  waveTxn = await waveContract.connect(randomPerson).wave("Another message!");
  await waveTxn.wait(); // Wait for the transaction to be mined

  const allWaves = await waveContract.getAllWaves();
  console.log(allWaves);

  waveCount = await waveContract.getTotalWaves();
  console.log("Wave count AFTER interacting:", waveCount.toNumber());
};

const runMain = async () => {
  try {
    await main();
    process.exit(0); // exit Node process without error
  } catch (error) {
    console.log(error);
    process.exit(1); // exit Node process while indicating 'Uncaught Fatal Exception' error
  }
  // Read more about Node exit ('process.exit(num)') status codes here: https://stackoverflow.com/a/47163396/7974948
};

runMain();
